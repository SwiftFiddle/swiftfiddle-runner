name: Build, Push and Deploy
on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
  GKE_CLUSTER: swiftfiddle-cluster
  GKE_ZONE: us-central1-c
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ env.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and Push Docker Images
        run: |
          set -ex

          versions=($(cat versions.txt | tr "\n" " "))
          for versionGroup in "${versions[@]}"; do
            for version in $(echo $versionGroup | sed "s/,/ /g"); do
              docker build --build-arg version="$versionGroup" --rm --tag "swiftfiddle/runner:$version" .
              docker push "swiftfiddle/runner:$version"
            done
          done

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.1
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ env.GCP_SA_KEY }}
          export_default_credentials: true

      - uses: google-github-actions/get-gke-credentials@v0.3.0
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          credentials: ${{ env.GCP_SA_KEY }}

      - name: Deploy
        run: |
          set -ex

          rm -f k8s/pod.yaml

          timestamp=$(date +%s%3N)

          versions=($(cat versions.txt | tr "\n" " "))
          for versionGroup in "${versions[@]}"; do
            read -r -a group <<< $(echo $versionGroup | sed "s/,/ /g")
            version=${group[${#group[@]}-1]}
            name="runner-v$(sed 's/\.//g' <<<"$version")"
            if [ "$version" = "5.4.2" -o "$version" = "nightly-main" ]; then
              replicas=3
            else
              replicas=1
            fi

            /bin/bash k8s/pod.yaml.sh "$version" "$name" "$replicas" "$timestamp"

            kubectl apply -f k8s/pod.yaml
            kubectl rollout status deployment/$name
          done

          kubectl get services -o wide

      - name: Commit and Push
        run: |
          set -ex

          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"

          git add k8s/pod.yaml
          git commit -m "Update k8s/pod.yaml"
          git push origin main

  test:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: actions/checkout@v2
      - name: Test
        run: |
          set -ex

          versions=($(cat versions.txt | tr "\n" " "))
          for versionGroup in "${versions[@]}"; do
            read -r -a group <<< $(echo $versionGroup | sed "s/,/ /g")
            for version in ${group[@]}; do
              curl --silent --show-error --fail -i -X POST "https://swiftfiddle.com/runner/$version/run" \
                -H "Content-Type:application/json" \
                --data "{\"code\":\"print(\\\"Hello, World!\\\")\"}"
            done
          done
