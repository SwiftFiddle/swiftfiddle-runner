name: Deploy all runners
on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
  GKE_CLUSTER: swiftfiddle-cluster
  GKE_ZONE: us-central1-c
  GCR_HOSTNAME: us.gcr.io
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

jobs:
  matrix:
    runs-on: ubuntu-latest
    outputs:
      versionGroup: ${{ steps.set-matrix.outputs.versionGroup }}
      version: ${{ steps.set-matrix.outputs.version }}
    steps:
      - uses: actions/checkout@v2

      - id: set-matrix
        run: |
          versionGroup=$(cat versions.json | jq '.[] | map("\\\"" + . + "\\\"") | join(",")' | jq -s | tr -d "\n")
          echo "::set-output name=versionGroup::$versionGroup"

  build:
    runs-on: ubuntu-latest
    needs: matrix
    strategy:
      fail-fast: false
      matrix:
        versionGroup: ${{ fromJson(needs.matrix.outputs.versionGroup) }}
    steps:
      - uses: actions/checkout@v2

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.1
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ env.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Authorize Docker push
        run: gcloud auth configure-docker

      - name: Build and Push Docker Images
        run: |
          set -ex

          version=$(echo [${{ matrix.versionGroup }}] | jq '.[0]')
          versions=$(echo [${{ matrix.versionGroup }}] | jq 'join(" ")')
          IMAGE_TAG=${{ env.GCR_HOSTNAME }}/${{ env.PROJECT_ID }}/runner:$version

          docker build --rm \
            --build-arg username="${{ env.DOCKER_HUB_USERNAME}}" \
            --build-arg access_token="${{ env.DOCKER_HUB_ACCESS_TOKEN}}" \
            --build-arg versions="$versions" \
            --tag ${IMAGE_TAG} .
          docker push ${IMAGE_TAG}

  deploy:
    runs-on: ubuntu-latest
    needs: matrix
    needs: build
    strategy:
      fail-fast: false
      matrix:
        versionGroup: ${{ fromJson(needs.matrix.outputs.versionGroup) }}
    steps:
      - uses: actions/checkout@v2

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.1
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ env.GCP_SA_KEY }}
          export_default_credentials: true

      - uses: google-github-actions/get-gke-credentials@v0.3.0
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          credentials: ${{ env.GCP_SA_KEY }}

      - name: Deploy
        run: |
          set -ex

          rm -f k8s/pod.yaml

          version=$(echo [${{ matrix.versionGroup }}] | jq '.[0]')
          name="runner-v$(sed 's/\.//g' <<<"$version")"

          /bin/bash k8s/pod.yaml.sh "$version" "$name" | kubectl apply --dry-run=server -f -

          kubectl rollout status deployment/$name
          kubectl get services -o wide
