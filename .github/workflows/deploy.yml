name: Deploy all runners
on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
  GKE_CLUSTER: swiftfiddle-cluster
  GKE_ZONE: us-central1-c
  GCR_HOSTNAME: us.gcr.io
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

  REGISTRY_NAME: swiftfiddle.azurecr.io
  CLUSTER_NAME: swiftfiddle
  CLUSTER_RESOURCE_GROUP: swiftfiddle
  NAMESPACE: default
  APP_NAME: swiftfiddle/runner

jobs:
  matrix:
    runs-on: ubuntu-latest
    outputs:
      versionGroup: ${{ steps.set-matrix.outputs.versionGroup }}
    steps:
      - uses: actions/checkout@v2

      - id: set-matrix
        run: |
          versionGroup=$(cat versions.json | jq '.[] | map("\\\"" + . + "\\\"") | join(",")' | jq -s | tr -d "\n")
          echo "::set-output name=versionGroup::$versionGroup"

  build:
    runs-on: ubuntu-latest
    needs: matrix
    strategy:
      fail-fast: false
      matrix:
        versionGroup: ${{ fromJson(needs.matrix.outputs.versionGroup) }}
    steps:
      - uses: actions/checkout@v2

      - uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY_NAME }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and Push Docker Images
        run: |
          set -ex

          versionGroup="[${{ matrix.versionGroup }}]"
          version=$(echo $versionGroup | jq -r '.[0]')
          versions=$(echo $versionGroup | jq -r 'join(" ")')
          IMAGE_TAG=${{ env.REGISTRY_NAME }}/${{ env.APP_NAME }}:$version

          docker build --rm \
            --build-arg username="${{ env.DOCKER_HUB_USERNAME}}" \
            --build-arg access_token="${{ env.DOCKER_HUB_ACCESS_TOKEN}}" \
            --build-arg versions="$versions" \
            --tag ${IMAGE_TAG} .
          docker push ${IMAGE_TAG}

  deploy:
    runs-on: ubuntu-latest
    needs:
      - matrix
      - build
    strategy:
      fail-fast: false
      matrix:
        versionGroup: ${{ fromJson(needs.matrix.outputs.versionGroup) }}
    steps:
      - uses: actions/checkout@v2

      - uses: azure/setup-kubectl@v1

      - uses: azure/aks-set-context@v1
        with:
          creds: "${{ secrets.AZURE_CREDENTIALS }}"
          cluster-name: ${{ env.CLUSTER_NAME }}
          resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}

      - name: Deploy
        run: |
          set -ex

          version=$(echo [${{ matrix.versionGroup }}] | jq -r '.[0]')
          name="runner-v$(sed 's/\.//g' <<<"$version")"

          /bin/bash k8s/pod.yaml.sh "$version" "$name" | kubectl apply -f -

          kubectl rollout status deployment/$name
          kubectl get services -o wide
